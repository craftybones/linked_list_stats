1588774818537:(take 4 (into '(0 0 0) [1 2 3]))
1588775205388:(def left-xform (comp (remove zero?)\n                      (partition-by identity)\n                      (mapcat (partial partition-all 2))\n                      (map (partial apply +))))\n\n(defn move-row-left [row]\n  (-> (into [] left-xform row)\n      (concat (repeat 0))\n      (take 4)))
1588775212862:(move-row-left [2 2 0 2])
1588775225279:(into [] left-xform [2 2 0 2])
1588775354278:(def left-xform (comp (remove zero?)\n                      (partition-by identity)\n                      (mapcat (partial partition-all 2))\n                      (map (partial apply +))))\n\n(defn pad-zeroes [coll]\n  (concat coll (repeat 0)))\n\n(defn move-row-left [row]\n  (->> row\n       (into [] left-xform)\n       (pad-zeroes)\n       (take 4)))
1588775360600:(move-row-left [2 2 0 2])
1588829978450:(def left-xform (comp (remove zero?)\n                      (partition-by identity)\n                      (mapcat (partial partition-all 2))\n                      (map (partial apply +))))\n\n(defn pad-zeroes [coll]\n  (concat coll (repeat 0)))\n\n(defn move-row-left [row]\n  (->> row\n       (into [] left-xform)\n       (pad-zeroes)\n       (take 4)))\n\n(def move-row-right (comp reverse move-row-left reverse))\n\n(def move-left (partial map move-row-left))\n(def move-right (partial map move-row-right))
1588829993776:(move-left [[2 2 0 2] [4 8 4 4]])
1588830109549:(def left-xform (comp (remove zero?)\n                      (partition-by identity)\n                      (mapcat (partial partition-all 2))\n                      (map (partial apply +))))\n\n(defn pad-zeroes [coll]\n  (concat coll (repeat 0)))\n\n(defn move-row-left [row]\n  (->> row\n       (into [] left-xform)\n       (pad-zeroes)\n       (take 4)))\n\n(def move-row-right (comp reverse move-row-left reverse))\n\n(def move-left (partial map move-row-left))\n(def move-right (partial map move-row-right))\n\n(def transpose (partial apply mapv vector))\n\n(def move-up (comp transpose move-left transpose))\n(def move-down (comp transpose move-right transpose))
1588830122243:(move-up [[2 2 0 2] [2 0 0 4]])
1588830156321:(move-down [[2 2 0 2] [2 0 0 4]])
1588834538493:##Inf
1588834549846:(sort [##Inf 2])
1588834628639:(sort [[1] [2]])
1588834637454:(sort [[1 0] [1 -2]])
1588834641453:(sort [[1 0] [1 -2 1]])
1588834656082:(sort [[1 0] [1 2 1]])
1588834659939:(sort [[1 0 100] [1 2 1]])
1588834668429:(sort [[1 0 100 1000] [1 2 1]])
1588836938987:(for [x (range 5)]\n  (for [y (range (Math/pow 2 x) (Math/pow 2 (inc x)))]\n    y))
1588837094309:(bit-shift-left 4 2)
1588840086935:(take 4 (iterate last [1 [2 [3 [4]]]]))
1588840099015:(take 4 (iterate butlast [1 [2 [3 [4]]]]))
1588840116801:(take 4 (iterate (comp butlast) [1 [2 [3 [4]]]]))
1588840123095:(take 4 (iterate (comp butlast last) [1 [2 [3 [4]]]]))
1588840169815:(take 4 (iterate last [1 [2 [3 [4]]]]))
1588840206286:(map butlast (take 4 (iterate last [1 [2 [3 [4]]]])))
1588840242582:(map butlast (take 4 (iterate last '(+ 1 (+ 2 (+ 3 4))))))
1588840272906:(take 4 (iterate last '(+ 1 (+ 2 (+ 3 4)))))
1588840296973:(take 3 (iterate last '(+ 1 (+ 2 (+ 3 4)))))
1588840303474:(map last (take 3 (iterate last '(+ 1 (+ 2 (+ 3 4))))))
1588840383076:(def code '(+ 2 (+ 3 4)))\n\n(defn wrangle [code]\n  (loop [c code\n         newc '()]\n    (if (seq? (last c))\n      (recur (last c) (conj newc (butlast c)))\n      (conj newc (butlast c) (last c) '->>))))
1588840387209:(wrangle code)
1588840414122:(wrangle '(+ 1 (+ 2 (+ 3 (* 4 (/ 5 2))))))
1588840433269:(clojure.pprint/pprint (wrangle '(+ 1 (+ 2 (+ 3 (* 4 (/ 5 2)))))))
1588840467386:(eval (wrangle '(+ 1 (+ 2 (+ 3 (* 4 (/ 5 2)))))))
1588840585959:(wrangle '(inc (inc (* 4 5 (/ 6 2)))))
1588840605131:(eval (wrangle '(inc (inc (* 4 5 (/ 6 2))))))
